diff -Nru openjdk.orig/jdk/src/windows/native/sun/windows/awt_Component.cpp openjdk/jdk/src/windows/native/sun/windows/awt_Component.cpp
--- openjdk.orig/jdk/src/windows/native/sun/windows/awt_Component.cpp	2017-01-03 06:00:54.997946001 +0000
+++ openjdk/jdk/src/windows/native/sun/windows/awt_Component.cpp	2017-01-03 06:01:41.137192462 +0000
@@ -226,6 +226,10 @@
 // Added by waleed to initialize the RTL Flags
 BOOL AwtComponent::sm_rtl = PRIMARYLANGID(GetInputLanguage()) == LANG_ARABIC ||
                             PRIMARYLANGID(GetInputLanguage()) == LANG_HEBREW;
+
+UINT AwtComponent::sm_95WheelMessage = WM_NULL;
+UINT AwtComponent::sm_95WheelSupport = WM_NULL;			    
+
 BOOL AwtComponent::sm_rtlReadingOrder =
     PRIMARYLANGID(GetInputLanguage()) == LANG_ARABIC;
 
diff -Nru openjdk.orig/jdk/src/windows/native/sun/windows/awt_Component.h openjdk/jdk/src/windows/native/sun/windows/awt_Component.h
--- openjdk.orig/jdk/src/windows/native/sun/windows/awt_Component.h	2016-12-30 04:57:02.000000000 +0000
+++ openjdk/jdk/src/windows/native/sun/windows/awt_Component.h	2017-01-03 06:02:39.296242449 +0000
@@ -419,6 +419,14 @@
      * List.  All other Components return FALSE.
      */
     virtual BOOL InheritsNativeMouseWheelBehavior();
+    
+     /* Functions for MouseWheel support on Windows95
+      * These should only be called if running on 95
+      */
+    static void Wheel95Init();
+    INLINE static UINT Wheel95GetMsg() {return sm_95WheelMessage;}
+    static UINT Wheel95GetScrLines();
+  
 
     /* Determines whether the component is obscured by another window */
     // Called on Toolkit thread
@@ -715,6 +723,10 @@
     virtual void SetDragCapture(UINT flags);
     virtual void ReleaseDragCapture(UINT flags);
 
+    // 95 support for mouse wheel
+    static UINT sm_95WheelMessage;
+    static UINT sm_95WheelSupport;    
+
     virtual void FillBackground(HDC hMemoryDC, SIZE &size);
     virtual void FillAlpha(void *bitmapBits, SIZE &size, BYTE alpha);
 
diff -Nru openjdk.orig/jdk/src/windows/native/sun/windows/awt_MMStub.h openjdk/jdk/src/windows/native/sun/windows/awt_MMStub.h
--- openjdk.orig/jdk/src/windows/native/sun/windows/awt_MMStub.h	2016-12-30 04:30:30.000000000 +0000
+++ openjdk/jdk/src/windows/native/sun/windows/awt_MMStub.h	2017-01-03 06:03:08.111771686 +0000
@@ -84,6 +84,12 @@
 #define DEV_STR_LEN                         128
 
 
+#define ULW_ALPHA                           0x00000002
+#define LWA_ALPHA                           0x00000002
+#define WS_EX_LAYERED                       0x00080000
+#define WS_EX_NOACTIVATE                    0x08000000L
+
+
 //  Datatypes
 typedef BOOL (CALLBACK* MON_ENUM_CALLBACK_PROC)(MHND,HDC,LPRECT,LPARAM);
 
@@ -114,6 +120,15 @@
     WCHAR       deviceKey[128];
 } _DISPLAY_DEVICE, *P_DISPLAY_DEVICE;
 
+typedef struct tagMSLLHOOKSTRUCT 
+{
+    POINT       pt;
+    DWORD       mouseData;
+    DWORD       flags;
+    DWORD       time;
+    ULONG_PTR   dwExtraInfo;
+} MSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT;
+
 /*  Basic API's  */
 BOOL WINAPI                     _enumDisplayMonitors(HDC,LPCRECT,MON_ENUM_CALLBACK_PROC,LPARAM);
 BOOL WINAPI                     _enumDisplayDevices (LPVOID,int,P_DISPLAY_DEVICE,DWORD);
@@ -131,6 +146,10 @@
 HWND WINAPI                     _createWindowOM     (MHND,LPCTSTR,LPCTSTR,DWORD,int,int,int,
                                                      int,HWND,HMENU,HANDLE,LPVOID);
 
+WINUSERAPI BOOL WINAPI          SetLayeredWindowAttributes(HWND,COLORREF,BYTE,DWORD);
+WINUSERAPI BOOL WINAPI          UpdateLayeredWindow(HWND,HDC,POINT*,SIZE*,HDC,POINT*,COLORREF,BLENDFUNCTION*,DWORD);
+
+
 #ifdef __cplusplus
 }
 #endif  /* __cplusplus */
